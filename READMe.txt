Перемножение разреженных матриц.

Необходимо придумать и реализовать структуру данных для эффективного представления разреженных целочисленных матриц.
Используя разработанную структуру данных, также необходимо реализовать интерфейс SparseMatrixSupport,
который включает метод перемножения матриц.
Утилитные методы toStream и fromStream передают/принимают значения элементов по строкам: слева направо, сверху вниз.
Предложенное решение должно справляться с перемножением больших матриц (не менее 1 миллиона строк и 1 миллиона столбцов).
Созданные классы должны находиться в default package.
Обработка исключений, формат проекта, разработка документации и прочее остается на усмотрение разработчика.
Для решения задачи потребуется Java 1.8.




Итак, структура данных с разряженной матрицей. Она состоит из двух копий матрицы. Это одинаковые подструктурки.
В одной лежат данные, уложенные по строкам. В другой — по столбцам.
Возьмём первую. Там есть массив строк.
Полностью пустые строки пропущены. Каждая строка — это массив целых чисел.
Первый элемент массива — номер строки. Нулевые значения пропущены.
Каждое ненулевое значение представлено двумя элементами массива: индекс колонки и само число.
Пример матрицы:
4 2 0 0
0 8 0 5
0 0 0 0
0 0 1 0
Вот как она будет храниться в первой структуре:
0 0 4 1 2
1 1 8 3 5
3 2 1
Вторая структура такая же, но вместо строк — столбцы.
0 0 4
1 0 2 1 8
2 3 1
3 1 5
class SparseMatrix {
  private final ArrayList<IntList> byRows;
  private final ArrayList<IntList> byColumns;
}
Внимание! Вместо ArrayList<Integer> берём именно IntList.

Ключевая операция — скалярное произведение столбца на строку. Если нет строки или столбца, в результат ничего не пишем. Произведение пары элементов выполняем, только когда оба есть. Когда закончена строка или столбец — скалярное произведение завершаем.